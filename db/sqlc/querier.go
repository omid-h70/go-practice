// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error)
	CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error)
	CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteAccount(ctx context.Context, accountID int64) error
	GetAccount(ctx context.Context, accountID int64) (Account, error)
	GetAccountForUpdate(ctx context.Context, accountID int64) (Account, error)
	GetEntry(ctx context.Context, entryID int64) (Entry, error)
	GetSession(ctx context.Context, sessionUuid uuid.UUID) (Session, error)
	GetTransfer(ctx context.Context, transferID int64) (Transfer, error)
	GetUser(ctx context.Context, userName string) (User, error)
	// To Avoid DeadLock Happening between operations caused by foreign key
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error)
	ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error)
	ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error)
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error)
	// using nullable types
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	UpdateUser1(ctx context.Context, arg UpdateUser1Params) (User, error)
	// @ is the same as sqlc.arg - @ used for named parameters - $ used for positional parameters
	// @hashed_password is the one from outside - hashed_password (without @) is database field
	UpdateUser2(ctx context.Context, arg UpdateUser2Params) (User, error)
	UpdateUser3(ctx context.Context, arg UpdateUser3Params) (User, error)
}

var _ Querier = (*Queries)(nil)
